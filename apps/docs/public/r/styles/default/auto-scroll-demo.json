{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auto-scroll",
  "type": "registry:ui",
  "description": "A React hook that automatically scrolls a list to the bottom when new items are added, pausing when the user scrolls up or interacts manually.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/default/examples/auto-scroll-demo.tsx",
      "content": "\"use client\";\n\nimport { autoScrollListRef } from \"@/hooks/use-auto-scroll\";\nimport { useState, useRef, useEffect, type KeyboardEvent } from \"react\";\n\ninterface Message {\n  sender: \\\"user\\\" | \\\"ai\\\";\n  text: string;\n}\n\nconst UseAutoScrollDemo = () => {\n  const [messages, setMessages] = useState<Message[]>([\n    { sender: \\\"ai\\\", text: \\\"Welcome to the chat!\\\" },\n    { sender: \\\"ai\\\", text: \\\"Feel free to add new messages.\\\" },\n  ]);\n  const [input, setInput] = useState(\\\"\\\");\n\n  const typingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const sendMessage = () => {\n    const trimmedInput = input.trim();\n    if (trimmedInput === \\\"\\\") {\n      return;\n    }\n\n    const userMessage: Message = { sender: \\\"user\\\", text: trimmedInput };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\\\"\\\");\n\n    // Simulate AI response\n    const aiResponse = `Sint nisi eu cillum nulla officia incididunt irure laboris enim cillum cupidatat occaecat. \nDuis adipisicing veniam exercitation quis anim. Exercitation consectetur tempor et consectetur dolor. \nCupidatat culpa eiusmod ex enim occaecat dolor sunt. Et et commodo qui ipsum nostrud ut et incididunt est cupidatat excepteur laborum. \nAnim ullamco aliqua ad sit sint cupidatat esse esse.`;\n\n    // Break down the AI response into words\n    const words = aiResponse.split(\\\" \\\" );\n    let currentWordIndex = 0;\n\n    // Add a placeholder AI message first, so we have something to update\n    const newAiMessageIndex = messages.length + 1; // next index after user's message\n    setMessages((prev) => [...prev, { sender: \\\"ai\\\", text: \\\"\\\" }]);\n\n    // Type out each word at a fixed interval\n    typingIntervalRef.current = setInterval(() => {\n      setMessages((prevMessages) => {\n        // Ensure the AI message exists\n        if (!prevMessages[newAiMessageIndex]) {\n          return prevMessages;\n        }\n\n        // Update the AI message with the next word\n        const updatedMessages = [...prevMessages];\n        const currentAiMessage = updatedMessages[newAiMessageIndex];\n\n        currentAiMessage.text +=\n          (currentAiMessage.text ? \\\" \\\" : \\\"\\\") + words[currentWordIndex];\n\n        currentWordIndex++;\n\n        // If we've reached the end of all words, clear the interval\n        if (currentWordIndex >= words.length) {\n          if (typingIntervalRef.current) {\n            clearInterval(typingIntervalRef.current);\n            typingIntervalRef.current = null;\n          }\n        }\n\n        return updatedMessages;\n      });\n    }, 100); // 100ms per word\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \\\"Enter\\\") {\n      sendMessage();\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      // Cleanup if component unmounts\n      if (typingIntervalRef.current) {\n        clearInterval(typingIntervalRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\\\"max-w-md w-full mx-auto mt-10 p-4 bg-neutral-50 dark:bg-neutral-800 border border-neutral-400/20 rounded-xl\\\">\n      <h2 className=\\\"text-2xl font-semibold mb-4 text-center\\\">\n        Chat Interface\n      </h2>\n      <MessageList messages={messages} />\n      <div className=\\\"flex space-x-2\\\">\n        <input\n          type=\\\"text\\\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\\\"Type your message...\\\"\n          className=\\\"rounded-lg bg-neutral-400/20 border border-neutral-400/20 w-full placeholder:text-neutral-400\\\"\n        />\n        <button\n          type=\\\"button\\\"\n          onClick={sendMessage}\n          className=\\\"rounded-lg bg-neutral-400/20 border border-neutral-400/20 px-4\\\"\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\ninterface MessageListProps {\n  messages: Message[];\n}\n\nconst MessageList = ({ messages }: MessageListProps) => {\n  return (\n    <ul\n      ref={autoScrollListRef}\n      className=\\\"h-80 overflow-y-auto mb-4 space-y-2 rounded-md\\\"\n    >\n      {messages.map((msg, index) => (\n        <MessageItem key={`${index}-${msg.sender}-${msg.text}`} message={msg} />\n      ))}\n    </ul>\n  );\n};\n\ninterface MessageItemProps {\n  message: Message;\n}\n\nconst MessageItem = ({ message }: MessageItemProps) => {\n  return (\n    <li\n      className={`p-2 rounded-md break-words ${\n        message.sender === \\\"user\\\"\n          ? \\\"bg-sky-400/10 self-end border border-sky-400/20\\\"\n          : \\\"bg-white dark:bg-neutral-400/10 border border-neutral-400/20\\\"\n      }`}\n    >\n      {message.text}\n    </li>\n  );\n};\n\nexport default UseAutoScrollDemo;\n",
      "type": "registry:ui"
    },
      {
      "name": "use-auto-scroll.ts",
      "type": "registry:ui",
      "path": "registry/hooks/use-auto-scroll.ts",
      "content": ""
    }
  ]
}