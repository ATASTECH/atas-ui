{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stories-demo",
  "type": "registry:ui",
  "description": "A full-screen embla-carousel based Instagram-style stories viewer with animated transitions and multiple videos",
  "dependencies": [
    "embla-carousel-react",
    "framer-motion",
    "gsap",
    "@tabler/icons-react"
  ],
  "files": [
    {
      "name": "stories-demo.tsx",
      "type": "registry:ui",
      "path": "registry/atasui/stories-demo.tsx",
      "content": "// Auto-generated registry component\n\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { startTransition } from 'react';\nimport Stories from \"@/components/ui/stories\";\n\ninterface Video {\n  id: number;\n  video: string;\n  description: string;\n  link: string | null;\n}\n\ninterface Story {\n  id: number;\n  title: string;\n  image: string;\n  createdAt: string;\n  updatedAt: string;\n  videos: Video[];\n}\n\nconst StoriesDemo: React.FC = () => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedStoryIndex, setSelectedStoryIndex] = useState(0);\n  const [isMobile, setIsMobile] = useState(() => typeof window !== 'undefined' ? window.innerWidth < 768 : false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      startTransition(() => {\n        setIsMobile(window.innerWidth < 768);\n      });\n    };\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const isLoading = false;\n  const error = null;\n\n  const storiesData = {\n    results: [\n      {\n        id: 1,\n        title: \"Story 1\",\n        image: \"/images/story/story-avatar-1.jpeg\",\n        created: \"2025-01-01T00:00:00Z\",\n        modified: \"2025-01-02T00:00:00Z\",\n        videos: [\n          {\n            id: 101,\n            video: \"/images/story/story-1.mp4\",\n            description: \"Daily dose of cuteness: 1 duck, lots of joy 😍\",\n            link: null\n          }\n        ]\n      }\n    ]\n  };\n  const placeholderCount = isMobile ? 3 : 9;\n\n  const stories: Story[] = storiesData ? storiesData.results.map(story => ({\n    id: story.id,\n    title: story.title,\n    image: story.image,\n    createdAt: story.created,\n    updatedAt: story.modified,\n    videos: story.videos\n  })) : [];\n\n  if (error) return null;\n  if (!isLoading && stories.length === 0) return null;\n\n  const handleStoryClick = (index: number) => {\n    setSelectedStoryIndex(index);\n    setModalOpen(true);\n  };\n\n  return (\n    <>\n      <div className=\"p-4 my-4 max-w-6xl xl:ml-6\">\n        <div className=\"flex flex-wrap gap-4\">\n          {stories.map((story, index) => (\n            <div\n              key={story.id}\n              className=\"flex flex-col items-center cursor-pointer\"\n              onClick={() => handleStoryClick(index)}\n            >\n              <div className=\"p-[2px] rounded-full bg-gradient-to-tr from-yellow-500 via-red-400 to-purple-500\">\n                <div className=\"w-20 h-20 rounded-full overflow-hidden bg-white dark:bg-zinc-950\">\n                  <img\n                    src={story.image}\n                    alt={story.title}\n                    width={84}\n                    height={84}\n                    className=\"object-cover\"\n                  />\n                </div>\n              </div>\n              <h1 className=\"text-sm font-regular tracking-tighter mt-2 dark:text-neutral-200\">\n                {story.title}\n              </h1>\n            </div>\n          ))}\n        </div>\n      </div>\n      {isModalOpen && stories[selectedStoryIndex]?.videos && (\n        <Stories\n          onClose={() => setModalOpen(false)}\n          stories={stories}\n          initialStoryIndex={selectedStoryIndex}\n        />\n      )}\n    </>\n  );\n};\n\nexport default StoriesDemo;\n"
    },
    {
      "name": "stories.tsx",
      "type": "registry:ui",
      "path": "registry/atasui/full-screen-carousel.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState, MutableRefObject, useCallback } from \\\"react\\\";\nimport useEmblaCarousel from \\\"embla-carousel-react\\\";\nimport Fade from \\\"embla-carousel-fade\\\";\nimport { gsap } from \\\"gsap\\\";\nimport { IconChevronRight, IconChevronLeft, IconVolume, IconVolumeOff, IconLink } from '@tabler/icons-react';\n\ninterface Story {\n  id: number;\n  image: string;\n  title: string;\n  updatedAt: string;\n  videos?: {\n    id: number;\n    video: string;\n    description: string;\n    link: string | null;\n  }[];\n}\n\ninterface FullScreenCarouselProps {\n  onClose: () => void;\n  stories: Story[];\n  initialStoryIndex: number;\n  origin?: { x: number; y: number } | null;\n}\n\nconst getTimeAgo = (dateString: string) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n  if (interval >= 1) return interval + (interval === 1 ? \" year ago\" : \" years ago\");\n  interval = Math.floor(seconds / 2592000);\n  if (interval >= 1) return interval + (interval === 1 ? \" month ago\" : \" months ago\");\n  interval = Math.floor(seconds / 86400);\n  if (interval >= 1) return interval + (interval === 1 ? \" day ago\" : \" days ago\");\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) return interval + (interval === 1 ? \" hour ago\" : \" hours ago\");\n  interval = Math.floor(seconds / 60);\n  if (interval >= 1) return interval + (interval === 1 ? \" minute ago\" : \" minutes ago\");\n  return \"Just now\";\n};\n\nexport default function FullScreenCarousel({ onClose, stories, initialStoryIndex, origin }: FullScreenCarouselProps) {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: false, skipSnaps: false }, [Fade()]);\n  const [currentIndex, setCurrentIndex] = useState(initialStoryIndex);\n  const [isMuted, setIsMuted] = useState(true);\n  const videoRefs = useRef<(HTMLVideoElement | null)[]>([]);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Animate origin on mount\n  useEffect(() => {\n    if (origin && containerRef.current) {\n      const el = containerRef.current;\n      const { x, y } = origin;\n      gsap.fromTo(\n        el,\n        { x, y, scale: 0.4, opacity: 0 },\n        { x: 0, y: 0, scale: 1, opacity: 1, duration: 0.5, ease: \"power3.out\" }\n      );\n    }\n  }, [origin]);\n\n  // Play the current video and pause others\n  useEffect(() => {\n    videoRefs.current.forEach((video, index) => {\n      if (video) {\n        if (index === currentIndex) {\n          video.currentTime = 0;\n          video.muted = isMuted;\n          video.play().catch(() => {});\n        } else {\n          video.pause();\n        }\n      }\n    });\n  }, [currentIndex, isMuted]);\n\n  // Embla event handlers\n  useEffect(() => {\n    if (!emblaApi) return;\n    const onSelect = () => {\n      setCurrentIndex(emblaApi.selectedScrollSnap());\n    };\n    emblaApi.on(\"select\", onSelect);\n    return () => {\n      emblaApi.off(\"select\", onSelect);\n    };\n  }, [emblaApi]);\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  const currentStory = stories[currentIndex];\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"fixed inset-0 z-50 flex flex-col bg-black text-white\"\n      style={{\n        touchAction: 'pan-y'\n      }}\n    >\n      <div className=\"flex items-center justify-between p-4\">\n        <button\n          aria-label=\"Close\"\n          onClick={onClose}\n          className=\"text-white hover:text-gray-300\"\n        >\n          ✕\n        </button>\n        <div className=\"flex items-center gap-4\">\n          <button\n            aria-label={isMuted ? \"Unmute video\" : \"Mute video\"}\n            onClick={toggleMute}\n            className=\"text-white hover:text-gray-300\"\n          >\n            {isMuted ? <IconVolumeOff size={24} /> : <IconVolume size={24} />}\n          </button>\n          {currentStory && currentStory.videos && currentStory.videos[currentIndex] && currentStory.videos[currentIndex].link && (\n            <a\n              href={currentStory.videos[currentIndex].link ?? \"#\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-white hover:text-gray-300\"\n              aria-label=\"Open link\"\n            >\n              <IconLink size={24} />\n            </a>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-hidden\" ref={emblaRef}>\n        <div className=\"embla__container flex h-full\">\n          {stories.map((story, index) => (\n            <div\n              className=\"embla__slide relative flex-shrink-0 w-full h-full flex flex-col items-center justify-center\"\n              key={story.id}\n            >\n              {story.videos && story.videos.length > 0 ? (\n                <video\n                  ref={(el) => (videoRefs.current[index] = el)}\n                  src={story.videos[0].video}\n                  className=\"max-h-full max-w-full object-contain\"\n                  muted={isMuted}\n                  playsInline\n                  loop\n                  controls={false}\n                />\n              ) : (\n                <img\n                  src={story.image}\n                  alt={story.title}\n                  className=\"max-h-full max-w-full object-contain\"\n                />\n              )}\n              <div className=\"absolute bottom-4 left-4 right-4 text-white bg-black bg-opacity-50 p-2 rounded\">\n                <h2 className=\"text-lg font-semibold\">{story.title}</h2>\n                <p className=\"text-sm\">{getTimeAgo(story.updatedAt)}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex justify-between p-4\">\n        <button\n          aria-label=\"Previous\"\n          onClick={scrollPrev}\n          disabled={currentIndex === 0}\n          className=\"text-white disabled:opacity-50 hover:text-gray-300\"\n        >\n          <IconChevronLeft size={32} />\n        </button>\n        <button\n          aria-label=\"Next\"\n          onClick={scrollNext}\n          disabled={currentIndex === stories.length - 1}\n          className=\"text-white disabled:opacity-50 hover:text-gray-300\"\n        >\n          <IconChevronRight size={32} />\n        </button>\n      </div>\n    </div>\n  );\n}\n"
    }
  ]
}
